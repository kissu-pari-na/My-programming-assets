#include<bits/stdc++.h>
using namespace std;
typedef long long LL ;

int n ;
struct qry{
    int l , r ;
    LL val ;
    qry() {} ;
    qry( int _l , int _r , LL _val ) { l = _l ; r = _r ; val = _val ; } ;
    bool operator < ( const qry &p ) const
    {
        if( val == p.val ) return l < p.l ;
        return val > p.val ;
    }
}Q[100005];

struct info{
    int id ;
    LL val ;
    info() {} ;
    info( int _id , LL _val ) { id = _id ; val = _val ; } ;
    bool operator < ( const info &p ) const
    {
        if( val == p.val ) return id < p.id ;
        return val > p.val ;
    }
}a[100005];

int tree[3*100005] ;

void update( int node , int left , int right , int pos )
{
    if( left > pos || right < pos ) return ;
    if( left >= pos && right <= pos )
    {
        tree[node] = 1 ;
        return ;
    }
    int mid = left + ( ( right - left ) >> 1 ) ;
    int Lnode = node * 2 ;
    int Rnode = node * 2 + 1 ;
    update( Lnode , left , mid , pos ) ;
    update( Rnode , mid + 1 , right , pos ) ;
    tree[node] = tree[Lnode] + tree[Rnode] ;
}

int query( int node , int left , int right , int i , int j )
{
    if( left > j || right < i ) return 0 ;
    if( left >= i && right <= j ) return tree[node] ;
    int mid = left + ( ( right - left ) >> 1 ) ;
    int Lnode = node * 2 ;
    int Rnode = node * 2 + 1 ;
    return query( Lnode , left , mid , i , j ) + query( Rnode , mid + 1 , right , i , j ) ;
}



int main()
{
    int t , i , j , k ;
    scanf("%d",&t) ;
    while( t-- )
    {
        memset( tree , 0 , sizeof( tree ) ) ;
        scanf("%d",&n) ;
        for( i = 1 ; i <= n ; i ++ )
        {
            scanf("%lld",&a[i].val) ;
            a[i].id = i ;
            Q[i].l = i + 1 , Q[i].r = n , Q[i].val = a[i].val * 2 ;
        }
        sort( a + 1 , a + 1 + n ) ;
        sort( Q + 1 , Q + 1 + n ) ;
        int pos = 1 ;
        LL res = 0 ;
        for( i = 1 ; i <= n ; i ++ )
        {
            while( pos <= n && a[pos].val >= Q[i].val )
            {
                update( 1 , 1 , n , a[pos].id ) ;
                pos ++ ;
            }
            if( Q[i].l <= Q[i].r ) res += query( 1 , 1 , n , Q[i].l , Q[i].r ) ;
        }
        printf("%lld\n",res) ;
    }
    return 0;
}
