/** Minimum Spanning Tree(Kruskal) **/
#include<bits/stdc++.h>
typedef long long LL ;
using namespace std ;

#define DBG puts("I am here...")

LL n , m ;
LL par[100005] ;

struct edge{
    LL u , v , w ;
    edge(){}
    edge( LL u , LL v , LL w ): u(u) , v(v) , w(w) { }
    bool operator < ( const edge &p ) const{
        return w < p.w ;
    }
};
vector< edge > V ;

LL Find( LL u ){
    if( u == par[u] ) return u ;
    return par[u] = Find( par[u] ) ;
}


LL MST(){
    sort( V.begin() , V.end() ) ;
    LL i , d = V.size() ;
//    DBG ;
//    for( i = 0 ; i < d ; i ++ ){
//        printf("%lld %lld %lld\n",V[i].u,V[i].v,V[i].w) ;
//    }
//    DBG ;
    LL tot = 0 ;
    for( i = 1 ; i <= n ; i ++ ) par[i] = i ;
    for( i = 0 ; i < d ; i ++ ){
        LL u = Find( V[i].u ) ;
        LL v = Find( V[i].v ) ;
        if( u != v ){
            tot += V[i].w ;
            par[v] = u ;
        }
    }
    return tot ;
}

int main(){
    LL i ;
    scanf("%lld %lld",&n,&m) ;
    for( i = 1 ; i <= m ; i ++ ){
        LL u , v , w ;
        scanf("%lld%lld%lld",&u,&v,&w) ;
        V.push_back( edge( u , v , w ) ) ;
    }
    printf("%lld\n",MST( )) ;
    return 0 ;
}

/*
7 10
1 2 1
1 4 2
4 5 3
5 7 4
6 7 5
3 6 6
2 3 7
1 5 8
3 7 9
2 4 10


7 10
1 2 1
1 4 2
4 5 2
5 7 3
6 7 3
3 6 4
2 3 4
1 5 8
3 7 9
2 4 10
*/
