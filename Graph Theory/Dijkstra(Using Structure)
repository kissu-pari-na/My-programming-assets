/** Dijkstra's Algorithm(Using Structure)

#include<bits/stdc++.h>
typedef long long LL ;
using namespace std ;

#define DBG puts("I am here...")

LL n , m ;

vector< LL > V[100005] , cost[100005] ;
LL dis[100005] ;

struct node{
    LL w , u ;
    node(){}
    node( LL w , LL u ): w(w) , u(u) {}
    bool operator < ( const node &p ) const{
        return w > p.w ;
    }
};

void Dyaxtra(LL u){
    LL i , d ;
    for( i = 1 ; i <= n ; i ++ ) dis[i] = LLONG_MAX ;
    priority_queue < node > pq ;
    pq.push( node( 0LL , u ) ) ;
    dis[u] = 0 ;
    while( !pq.empty() ){
        u = pq.top().u ;
        pq.pop() ;
        d = V[u].size() ;
        for( i = 0 ; i < d ; i ++ ){
            LL v = V[u][i] ;
            if( dis[u] + cost[u][i] < dis[v] ){
                dis[v] = dis[u] + cost[u][i] ;
                pq.push( node( dis[v] , v ) ) ;
            }
        }
    }
}

int main(){
    LL i , j ;
    scanf("%lld %lld",&n,&m) ;
    for( i = 1 ; i <= m ; i ++ ){
        LL u , v , w ;
        scanf("%lld%lld%lld",&u,&v,&w) ;
        V[u].push_back( v ) ;
        cost[u].push_back( w ) ;
    }
    Dyaxtra( 1 ) ;
    for( i = 1 ; i <= n ; i ++ ){
        if( i > 1 ) printf(" ") ;
        printf("%lld",dis[i]) ;
    }puts("") ;
    return 0 ;
}

/*
4 5

1 2 10
1 3 4
3 2 5
1 4 4
4 2 4
*/
